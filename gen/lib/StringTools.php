<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

use \php\Boot;
use \php\_Boot\HxString;

class StringTools {
	/**
	 * @var \Array_hx
	 */
	static public $winMetaCharacters;


	/**
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function lpad ($s, $c, $l) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:75: characters 3-47
		if ((strlen($c) === 0) || (strlen($s) >= $l)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:75: characters 39-47
			return $s;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:76: characters 3-78
		$padLength = (int)(ceil(($l - strlen($s)) / strlen($c))) * strlen($c) + strlen($s);
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:77: characters 3-61
		return str_pad($s, $padLength, $c, STR_PAD_LEFT);
	}


	/**
	 * @param string $argument
	 * 
	 * @return string
	 */
	static public function quoteUnixArg ($argument) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:114: lines 114-115
		if ($argument === "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:115: characters 4-15
			return "''";
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:117: lines 117-118
		if (!(new \EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:118: characters 4-19
			return $argument;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:122: characters 3-55
		return "'" . (StringTools::replace($argument, "'", "'\"'\"'")??'null') . "'";
	}


	/**
	 * @param string $argument
	 * @param bool $escapeMetaCharacters
	 * 
	 * @return string
	 */
	static public function quoteWinArg ($argument, $escapeMetaCharacters) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:145: lines 145-188
		if (!(new \EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:150: characters 4-33
			$result = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:151: characters 4-98
			$needquote = (HxString::indexOf($argument, " ") !== -1) || (HxString::indexOf($argument, "\x09") !== -1) || ($argument === "");
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:153: lines 153-154
			if ($needquote) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:154: characters 5-20
				$result->add("\"");
			}
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:156: characters 4-33
			$bs_buf = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			$_g = strlen($argument);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: characters 9-10
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: characters 13-35
				$_g2 = (($i < 0) || ($i >= strlen($argument)) ? null : ord($argument[$i]));
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: lines 158-175
				if ($_g2 === null) {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:169: characters 11-16
					$c = $_g2;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:171: lines 171-174
					if (strlen($bs_buf->b) > 0) {
						#/usr/local/lib/haxe/std/php/_std/StringTools.hx:172: characters 8-37
						$result->add($bs_buf->b);
						#/usr/local/lib/haxe/std/php/_std/StringTools.hx:173: characters 8-32
						$bs_buf = new \StringBuf();
					}
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-13
					$result1 = $result;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-24
					$result1->b = ($result1->b??'null') . (chr($c)??'null');

				} else {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: characters 13-35
					switch ($_g2) {
						case 34:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:164: characters 7-34
							$bs = $bs_buf->b;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:165: characters 7-21
							$result->add($bs);
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:166: characters 7-21
							$result->add($bs);
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:167: characters 7-31
							$bs_buf = new \StringBuf();
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:168: characters 7-24
							$result->add("\\\"");
							break;
						case 92:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:161: characters 7-23
							$bs_buf->add("\\");
							break;
						default:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:169: characters 11-16
							$c1 = $_g2;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:171: lines 171-174
							if (strlen($bs_buf->b) > 0) {
								#/usr/local/lib/haxe/std/php/_std/StringTools.hx:172: characters 8-37
								$result->add($bs_buf->b);
								#/usr/local/lib/haxe/std/php/_std/StringTools.hx:173: characters 8-32
								$bs_buf = new \StringBuf();
							}
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-13
							$result2 = $result;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-24
							$result2->b = ($result2->b??'null') . (chr($c1)??'null');

							break;
					}
				}

			}

			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:180: characters 4-33
			$result->add($bs_buf->b);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:182: lines 182-185
			if ($needquote) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:183: characters 5-34
				$result->add($bs_buf->b);
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:184: characters 5-20
				$result->add("\"");
			}
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:187: characters 4-32
			$argument = $result->b;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:190: lines 190-202
		if ($escapeMetaCharacters) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:191: characters 4-33
			$result3 = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			$_g11 = 0;
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			$_g3 = strlen($argument);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			while ($_g11 < $_g3) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
				$_g11 = $_g11 + 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: characters 9-10
				$i1 = $_g11 - 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:193: characters 5-36
				$c2 = (($i1 < 0) || ($i1 >= strlen($argument)) ? null : ord($argument[$i1]));
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:194: lines 194-196
				if (StringTools::$winMetaCharacters->indexOf($c2) >= 0) {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:195: characters 6-12
					$result4 = $result3;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:195: characters 6-30
					$result4->b = ($result4->b??'null') . (chr(94)??'null');
				}
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:197: characters 5-11
				$result5 = $result3;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:197: characters 5-22
				$result5->b = ($result5->b??'null') . (chr($c2)??'null');
			}

			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:199: characters 4-28
			return $result3->b;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:201: characters 4-19
			return $argument;
		}
	}


	/**
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:81: lines 81-83
		if ($sub === "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:82: characters 4-50
			return implode($by, str_split($s));
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:84: characters 3-40
		return str_replace($sub, $by, $s);
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$winMetaCharacters = \Array_hx::wrap([
	59,
	44,
	32,
	40,
	41,
	37,
	33,
	94,
	34,
	60,
	62,
	38,
	124,
	10,
	13,
]);
	}
}


Boot::registerClass(StringTools::class, 'StringTools');
StringTools::__hx__init();
