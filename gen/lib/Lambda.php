<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

use \php\Boot;
use \haxe\ds\List_hx;

class Lambda {
	/**
	 * @param object $it
	 * 
	 * @return \Array_hx
	 */
	static public function array ($it) {
		#/usr/local/lib/haxe/std/Lambda.hx:48: characters 3-26
		$a = new \Array_hx();
		#/usr/local/lib/haxe/std/Lambda.hx:49: characters 12-14
		$i = $it->iterator();
		#/usr/local/lib/haxe/std/Lambda.hx:49: characters 12-14
		while ($i->hasNext()) {
			#/usr/local/lib/haxe/std/Lambda.hx:49: lines 49-50
			$i1 = $i->next();
			#/usr/local/lib/haxe/std/Lambda.hx:50: characters 4-13
			$a->arr[$a->length] = $i1;
			#/usr/local/lib/haxe/std/Lambda.hx:50: characters 4-13
			++$a->length;
		}

		#/usr/local/lib/haxe/std/Lambda.hx:51: characters 3-11
		return $a;
	}


	/**
	 * @param object $it
	 * @param mixed $elt
	 * 
	 * @return bool
	 */
	static public function has ($it, $elt) {
		#/usr/local/lib/haxe/std/Lambda.hx:128: characters 13-15
		$x = $it->iterator();
		#/usr/local/lib/haxe/std/Lambda.hx:128: characters 13-15
		while ($x->hasNext()) {
			#/usr/local/lib/haxe/std/Lambda.hx:128: lines 128-130
			$x1 = $x->next();
			#/usr/local/lib/haxe/std/Lambda.hx:129: lines 129-130
			if (Boot::equal($x1, $elt)) {
				#/usr/local/lib/haxe/std/Lambda.hx:130: characters 5-16
				return true;
			}
		}

		#/usr/local/lib/haxe/std/Lambda.hx:131: characters 3-15
		return false;
	}


	/**
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function map ($it, $f) {
		#/usr/local/lib/haxe/std/Lambda.hx:74: characters 3-25
		$l = new List_hx();
		#/usr/local/lib/haxe/std/Lambda.hx:75: characters 13-15
		$x = $it->iterator();
		#/usr/local/lib/haxe/std/Lambda.hx:75: characters 13-15
		while ($x->hasNext()) {
			#/usr/local/lib/haxe/std/Lambda.hx:75: lines 75-76
			$x1 = $x->next();
			#/usr/local/lib/haxe/std/Lambda.hx:76: characters 4-15
			$l->add($f($x1));
		}

		#/usr/local/lib/haxe/std/Lambda.hx:77: characters 3-11
		return $l;
	}
}


Boot::registerClass(Lambda::class, 'Lambda');
