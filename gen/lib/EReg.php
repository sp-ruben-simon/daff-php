<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

use \php\Boot;

final class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var string
	 */
	public $re;


	/**
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:37: characters 3-19
		$this->pattern = $r;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:38: characters 3-26
		$a = \Array_hx::wrap(explode("g", $opt));
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:39: characters 3-24
		$this->global = $a->length > 1;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:40: lines 40-42
		if ($this->global) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:41: characters 4-20
			$opt = $a->join("");
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:43: characters 3-21
		$this->options = $opt;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:44: characters 3-64
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($opt??'null');
	}


	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:48: characters 3-78
		$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:50: lines 50-54
		if ($p > 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:51: characters 4-12
			$this->last = $s;
		} else {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:53: characters 4-15
			$this->last = null;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:55: characters 3-15
		return $p > 0;
	}
}


Boot::registerClass(EReg::class, 'EReg');
