<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

namespace haxe\ds;

use \haxe\IMap;
use \php\Boot;

class IntMap implements IMap {
	/**
	 * @var mixed
	 */
	public $data;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:37: characters 10-34
		$this1 = [];
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:37: characters 3-34
		$this->data = $this1;
	}


	/**
	 * @param int $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:65: lines 65-68
		if (array_key_exists($key, $this->data)) {
			#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:66: characters 4-27
			unset($this->data[$key]);
			#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:67: characters 4-15
			return true;
		}
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:70: characters 3-15
		return false;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:97: characters 15-32
		$this1 = [];
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:97: characters 3-33
		$parts = $this1;
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:98: lines 98-100
		foreach (($this->data) as $key => $value) {
			#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:99: characters 29-59
			$tmp = "" . ($key??'null') . " => " . (\Std::string($value)??'null');
			#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:99: characters 4-60
			array_push($parts, $tmp);
		};
		#/usr/local/lib/haxe/std/php/_std/haxe/ds/IntMap.hx:102: characters 3-49
		return "{" . (implode(", ", $parts)??'null') . "}";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(IntMap::class, 'haxe.ds.IntMap');
