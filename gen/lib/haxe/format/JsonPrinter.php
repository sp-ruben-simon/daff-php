<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

namespace haxe\format;

use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Utf8;
use \php\_Boot\HxAnon;

class JsonPrinter {
	/**
	 * @var \StringBuf
	 */
	public $buf;
	/**
	 * @var string
	 */
	public $indent;
	/**
	 * @var int
	 */
	public $nind;
	/**
	 * @var bool
	 */
	public $pretty;
	/**
	 * @var \Closure
	 */
	public $replacer;


	/**
	 * @param mixed $o
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return string
	 */
	static public function print ($o, $replacer = null, $space = null) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:45: characters 3-50
		$printer = new JsonPrinter($replacer, $space);
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:46: characters 3-23
		$printer->write("", $o);
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:47: characters 3-32
		return $printer->buf->b;
	}


	/**
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return void
	 */
	public function __construct ($replacer, $space) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:57: characters 3-27
		$this->replacer = $replacer;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:58: characters 3-22
		$this->indent = $space;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:59: characters 3-30
		$this->pretty = $space !== null;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:60: characters 3-16
		$this->nind = 0;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:67: characters 3-24
		$this->buf = new \StringBuf();
	}


	/**
	 * @param mixed $v
	 * 
	 * @return void
	 */
	public function classString ($v) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:154: characters 3-59
		$this->fieldsString($v, \Type::getInstanceFields(\Type::getClass($v)));
	}


	/**
	 * @param mixed $v
	 * @param \Array_hx $fields
	 * 
	 * @return void
	 */
	public function fieldsString ($v, $fields) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:162: characters 3-20
		$_this = $this->buf;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:162: characters 3-20
		$_this->b = ($_this->b??'null') . (chr(123)??'null');

		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:163: characters 3-27
		$len = $fields->length;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:164: characters 3-22
		$last = $len - 1;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:165: characters 3-20
		$first = true;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:166: lines 166-183
		$_g1 = 0;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:166: lines 166-183
		$_g = $len;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:166: lines 166-183
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:166: lines 166-183
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:166: characters 8-9
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:167: characters 4-22
			$f = ($fields->arr[$i] ?? null);
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:168: characters 4-35
			$value = \Reflect::field($v, $f);
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:169: characters 4-44
			if (($value instanceof \Closure) || ($value instanceof HxClosure)) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:169: characters 36-44
				continue;
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:170: characters 4-65
			if ($first) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:170: characters 18-24
				$this->nind++;
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:170: characters 26-39
				$first = false;
			} else {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:170: characters 48-65
				$_this1 = $this->buf;
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:170: characters 48-65
				$_this1->b = ($_this1->b??'null') . (chr(44)??'null');
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:171: characters 4-10
			if ($this->pretty) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:171: characters 4-10
				$_this2 = $this->buf;
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:171: characters 4-10
				$_this2->b = ($_this2->b??'null') . (chr(10)??'null');
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:172: characters 4-10
			if ($this->pretty) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:172: characters 4-10
				$v1 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:172: characters 4-10
				$this->buf->add($v1);
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:173: characters 4-12
			$this->quote($f);
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:174: characters 4-21
			$_this3 = $this->buf;
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:174: characters 4-21
			$_this3->b = ($_this3->b??'null') . (chr(58)??'null');

			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:175: characters 4-33
			if ($this->pretty) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:175: characters 16-33
				$_this4 = $this->buf;
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:175: characters 16-33
				$_this4->b = ($_this4->b??'null') . (chr(32)??'null');
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:176: characters 4-19
			$this->write($f, $value);
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:177: lines 177-182
			if ($i === $last) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:179: characters 5-11
				$this->nind--;
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:180: characters 5-11
				if ($this->pretty) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:180: characters 5-11
					$_this5 = $this->buf;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:180: characters 5-11
					$_this5->b = ($_this5->b??'null') . (chr(10)??'null');
				}
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:181: characters 5-11
				if ($this->pretty) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:181: characters 5-11
					$v2 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:181: characters 5-11
					$this->buf->add($v2);
				}
			}
		}

		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:184: characters 3-20
		$_this6 = $this->buf;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:184: characters 3-20
		$_this6->b = ($_this6->b??'null') . (chr(125)??'null');

	}


	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function quote ($s) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:189: lines 189-192
		if (strlen($s) !== Utf8::length($s)) {
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:190: characters 4-16
			$this->quoteUtf8($s);
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:191: characters 4-10
			return;
		}
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:194: characters 3-20
		$_this = $this->buf;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:194: characters 3-20
		$_this->b = ($_this->b??'null') . (chr(34)??'null');

		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:195: characters 3-13
		$i = 0;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:196: lines 196-214
		while (true) {
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:197: characters 38-41
			$i = $i + 1;
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:197: characters 12-42
			$index = $i - 1;
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:197: characters 4-43
			$c = (strlen($s) === $index ? 0 : ord($s[$index]));
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:198: characters 4-36
			if ($c === 0) {
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:198: characters 31-36
				break;
			}
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:199: lines 199-213
			switch ($c) {
				case 8:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:205: characters 12-22
					$this->buf->add("\\b");
					break;
				case 9:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:204: characters 20-30
					$this->buf->add("\\t");
					break;
				case 10:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:202: characters 20-30
					$this->buf->add("\\n");
					break;
				case 12:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:206: characters 13-23
					$this->buf->add("\\f");
					break;
				case 13:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:203: characters 20-30
					$this->buf->add("\\r");
					break;
				case 34:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:200: characters 19-29
					$this->buf->add("\\\"");
					break;
				case 92:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:201: characters 20-31
					$this->buf->add("\\\\");
					break;
				default:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:211: characters 5-15
					$_this1 = $this->buf;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:211: characters 5-15
					$_this1->b = ($_this1->b??'null') . (chr($c)??'null');
					break;
			}
		}
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:215: characters 3-20
		$_this2 = $this->buf;
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:215: characters 3-20
		$_this2->b = ($_this2->b??'null') . (chr(34)??'null');

	}


	/**
	 * @param string $s
	 * 
	 * @return void
	 */
	public function quoteUtf8 ($s) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:220: characters 3-27
		$u = new Utf8();
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:221: lines 221-231
		Utf8::iter($s, function ($c)  use (&$u) {
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:222: lines 222-230
			switch ($c) {
				case 8:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:227: characters 12-32
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:227: characters 34-53
					$u->addChar(98);
					break;
				case 9:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:226: characters 20-40
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:226: characters 42-61
					$u->addChar(116);
					break;
				case 10:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:224: characters 20-40
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:224: characters 42-61
					$u->addChar(110);
					break;
				case 12:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:228: characters 13-33
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:228: characters 35-54
					$u->addChar(102);
					break;
				case 13:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:225: characters 20-40
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:225: characters 42-61
					$u->addChar(114);
					break;
				case 34:
				case 92:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:223: characters 30-50
					$u->addChar(92);
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:223: characters 52-64
					$u->addChar($c);
					break;
				default:
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:229: characters 13-25
					$u->addChar($c);
					break;
			}
		});
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:232: characters 3-15
		$this->buf->add("\"");
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:233: characters 3-24
		$this->buf->add($u->toString());
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:234: characters 3-15
		$this->buf->add("\"");
	}


	/**
	 * @param mixed $k
	 * @param mixed $v
	 * 
	 * @return void
	 */
	public function write ($k, $v) {
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:80: characters 3-43
		if ($this->replacer !== null) {
			#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:80: characters 25-43
			$v = ($this->replacer)($k, $v);
		}
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:81: characters 11-25
		$_g = \Type::typeof($v);
		#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:81: characters 11-25
		switch ($_g->index) {
			case 0:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:132: characters 4-15
				$this->buf->add("null");
				break;
			case 1:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:87: characters 4-43
				$this->buf->add($v);
				break;
			case 2:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:89: characters 4-38
				$v1 = (is_finite($v) ? $v : "null");
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:89: characters 4-38
				$this->buf->add($v1);
				break;
			case 3:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:130: characters 4-61
				$this->buf->add(($v ? "true" : "false"));
				break;
			case 4:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:85: characters 4-16
				$this->fieldsString($v, \Reflect::fields($v));
				break;
			case 5:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:91: characters 4-18
				$this->buf->add("\"<fun>\"");
				break;
			case 6:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:92: characters 15-16
				$c = $_g->params[0];
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:93: lines 93-125
				if ($c === Boot::getClass('String')) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:94: characters 5-13
					$this->quote($v);
				} else if ($c === Boot::getClass(\Array_hx::class)) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:96: characters 5-32
					$v2 = $v;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:97: characters 5-22
					$_this = $this->buf;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:97: characters 5-22
					$_this->b = ($_this->b??'null') . (chr(91)??'null');

					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:99: characters 5-24
					$len = $v2->length;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:100: characters 5-24
					$last = $len - 1;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:101: lines 101-113
					$_g1 = 0;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:101: lines 101-113
					$_g2 = $len;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:101: lines 101-113
					while ($_g1 < $_g2) {
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:101: lines 101-113
						$_g1 = $_g1 + 1;
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:101: characters 10-11
						$i = $_g1 - 1;
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:103: characters 6-46
						if ($i > 0) {
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:103: characters 17-34
							$_this1 = $this->buf;
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:103: characters 17-34
							$_this1->b = ($_this1->b??'null') . (chr(44)??'null');
						} else {
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:103: characters 40-46
							$this->nind++;
						}
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:104: characters 6-12
						if ($this->pretty) {
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:104: characters 6-12
							$_this2 = $this->buf;
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:104: characters 6-12
							$_this2->b = ($_this2->b??'null') . (chr(10)??'null');
						}
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:105: characters 6-12
						if ($this->pretty) {
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:105: characters 6-12
							$v3 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:105: characters 6-12
							$this->buf->add($v3);
						}
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:106: characters 6-20
						$this->write($i, ($v2->arr[$i] ?? null));
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:107: lines 107-112
						if ($i === $last) {
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:109: characters 7-13
							$this->nind--;
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:110: characters 7-13
							if ($this->pretty) {
								#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:110: characters 7-13
								$_this3 = $this->buf;
								#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:110: characters 7-13
								$_this3->b = ($_this3->b??'null') . (chr(10)??'null');
							}
							#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:111: characters 7-13
							if ($this->pretty) {
								#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:111: characters 7-13
								$v4 = \StringTools::lpad("", $this->indent, $this->nind * strlen($this->indent));
								#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:111: characters 7-13
								$this->buf->add($v4);
							}
						}
					}

					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:114: characters 5-22
					$_this4 = $this->buf;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:114: characters 5-22
					$_this4->b = ($_this4->b??'null') . (chr(93)??'null');

				} else if ($c === Boot::getClass(StringMap::class)) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:116: characters 5-44
					$v5 = $v;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:117: characters 5-16
					$o = new HxAnon();
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:118: characters 15-23
					$k1 = new NativeArrayIterator(array_map("strval", array_keys($v5->data)));
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:118: characters 15-23
					while ($k1->hasNext()) {
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:118: lines 118-119
						$k2 = $k1->next();
						#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:119: characters 6-36
						\Reflect::setField($o, $k2, ($v5->data[$k2] ?? null));
					}

					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:120: characters 5-17
					$this->fieldsString($o, \Reflect::fields($o));
				} else if ($c === Boot::getClass(\Date::class)) {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:122: characters 5-22
					$v6 = $v;
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:123: characters 5-24
					$this->quote($v6->toString());
				} else {
					#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:125: characters 5-19
					$this->classString($v);
				}
				break;
			case 7:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:127: characters 4-40
				$i1 = Boot::dynamicField($v, 'index');
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:128: characters 4-10
				$this->buf->add($i1);
				break;
			case 8:
				#/usr/local/lib/haxe/std/haxe/format/JsonPrinter.hx:83: characters 4-16
				$this->buf->add("\"???\"");
				break;
		}

	}
}


Boot::registerClass(JsonPrinter::class, 'haxe.format.JsonPrinter');
