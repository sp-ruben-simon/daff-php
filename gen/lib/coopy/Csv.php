<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

namespace coopy;

use \php\Boot;
use \haxe\Log;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

class Csv {
	/**
	 * @var int
	 */
	public $cursor;
	/**
	 * @var string
	 */
	public $delim;
	/**
	 * @var string
	 */
	public $discovered_eol;
	/**
	 * @var bool
	 */
	public $has_structure;
	/**
	 * @var string
	 */
	public $preferred_eol;
	/**
	 * @var bool
	 */
	public $row_ended;


	/**
	 * @param string $delim
	 * @param string $eol
	 * 
	 * @return void
	 */
	public function __construct ($delim = ",", $eol = null) {
		#coopy/Csv.hx:29: lines 29-35
		if ($delim === null) {
			#coopy/Csv.hx:29: lines 29-35
			$delim = ",";
		}
		#coopy/Csv.hx:30: characters 9-19
		$this->cursor = 0;
		#coopy/Csv.hx:31: characters 9-26
		$this->row_ended = false;
		#coopy/Csv.hx:32: characters 9-45
		$this->delim = ($delim === null ? "," : $delim);
		#coopy/Csv.hx:33: characters 9-35
		$this->discovered_eol = null;
		#coopy/Csv.hx:34: characters 9-33
		$this->preferred_eol = $eol;
	}


	/**
	 * @return string
	 */
	public function getDiscoveredEol () {
		#coopy/Csv.hx:325: characters 9-30
		return $this->discovered_eol;
	}


	/**
	 * @param string $txt
	 * 
	 * @return Table
	 */
	public function makeTable ($txt) {
		#coopy/Csv.hx:204: characters 9-40
		$tab = new SimpleTable(0, 0);
		#coopy/Csv.hx:205: characters 9-28
		$this->parseTable($txt, $tab);
		#coopy/Csv.hx:206: characters 9-19
		return $tab;
	}


	/**
	 * @param string $txt
	 * 
	 * @return string
	 */
	public function parseCell ($txt) {
		#coopy/Csv.hx:310: characters 9-19
		$this->cursor = 0;
		#coopy/Csv.hx:311: characters 9-26
		$this->row_ended = false;
		#coopy/Csv.hx:312: characters 9-30
		$this->has_structure = false;
		#coopy/Csv.hx:313: characters 9-34
		return $this->parseCellPart($txt);
	}


	/**
	 * @param string $txt
	 * 
	 * @return string
	 */
	public function parseCellPart ($txt) {
		#coopy/Csv.hx:211: characters 9-35
		if ($txt === null) {
			#coopy/Csv.hx:211: characters 24-35
			return null;
		}
		#coopy/Csv.hx:212: characters 9-26
		$this->row_ended = false;
		#coopy/Csv.hx:213: characters 9-53
		$first_non_underscore = strlen($txt);
		#coopy/Csv.hx:214: characters 9-38
		$last_processed = 0;
		#coopy/Csv.hx:215: characters 9-36
		$quoting = false;
		#coopy/Csv.hx:216: characters 9-29
		$quote = 0;
		#coopy/Csv.hx:217: characters 9-34
		$result = "";
		#coopy/Csv.hx:218: characters 9-33
		$start = $this->cursor;
		#coopy/Csv.hx:219: lines 219-285
		$_g1 = $this->cursor;
		#coopy/Csv.hx:219: lines 219-285
		$_g = strlen($txt);
		#coopy/Csv.hx:219: lines 219-285
		while ($_g1 < $_g) {
			#coopy/Csv.hx:219: lines 219-285
			$_g1 = $_g1 + 1;
			#coopy/Csv.hx:219: characters 14-15
			$i = $_g1 - 1;
			#coopy/Csv.hx:220: characters 13-45
			$ch = (($i < 0) || ($i >= strlen($txt)) ? null : ord($txt[$i]));
			#coopy/Csv.hx:221: characters 13-31
			$last_processed = $i;
			#coopy/Csv.hx:222: lines 222-224
			if (($ch !== 95) && ($i < $first_non_underscore)) {
				#coopy/Csv.hx:223: characters 17-41
				$first_non_underscore = $i;
			}
			#coopy/Csv.hx:225: lines 225-283
			if ($this->has_structure) {
				#coopy/Csv.hx:226: lines 226-278
				if (!$quoting) {
					#coopy/Csv.hx:227: characters 29-48
					$_this = $this->delim;
					#coopy/Csv.hx:227: lines 227-244
					if ($ch === ((0 >= strlen($_this) ? null : ord($_this[0])))) {
						#coopy/Csv.hx:228: lines 228-230
						if (strlen($this->delim) === 1) {
							#coopy/Csv.hx:229: characters 29-34
							break;
						}
						#coopy/Csv.hx:231: lines 231-243
						if (($i + strlen($this->delim)) <= strlen($txt)) {
							#coopy/Csv.hx:232: characters 29-46
							$match = true;
							#coopy/Csv.hx:233: lines 233-238
							$_g3 = 1;
							#coopy/Csv.hx:233: lines 233-238
							$_g2 = strlen($this->delim);
							#coopy/Csv.hx:233: lines 233-238
							while ($_g3 < $_g2) {
								#coopy/Csv.hx:233: lines 233-238
								$_g3 = $_g3 + 1;
								#coopy/Csv.hx:233: characters 34-35
								$j = $_g3 - 1;
								#coopy/Csv.hx:234: characters 37-52
								$index = $i + $j;
								#coopy/Csv.hx:234: characters 54-69
								$_this1 = $this->delim;
								#coopy/Csv.hx:234: lines 234-237
								if (((($index < 0) || ($index >= strlen($txt)) ? "" : $txt[$index])) !== ((($j < 0) || ($j >= strlen($_this1)) ? "" : $_this1[$j]))) {
									#coopy/Csv.hx:235: characters 37-50
									$match = false;
									#coopy/Csv.hx:236: characters 37-42
									break;
								}
							}

							#coopy/Csv.hx:239: lines 239-242
							if ($match) {
								#coopy/Csv.hx:240: characters 33-63
								$last_processed = $last_processed + (strlen($this->delim) - 1);
								#coopy/Csv.hx:241: characters 33-38
								break;
							}
						}
					}
					#coopy/Csv.hx:245: lines 245-263
					if (($ch === 13) || ($ch === 10)) {
						#coopy/Csv.hx:246: characters 46-65
						$index1 = $i + 1;
						#coopy/Csv.hx:246: characters 25-66
						$ch2 = (($index1 < 0) || ($index1 >= strlen($txt)) ? null : ord($txt[$index1]));
						#coopy/Csv.hx:247: lines 247-257
						if ($ch2 !== null) {
							#coopy/Csv.hx:248: lines 248-256
							if ($ch2 !== $ch) {
								#coopy/Csv.hx:249: lines 249-255
								if (($ch2 === 13) || ($ch2 === 10)) {
									#coopy/Csv.hx:250: lines 250-253
									if ($this->discovered_eol === null) {
										#coopy/Csv.hx:251: lines 251-252
										$this->discovered_eol = (chr($ch)??'null') . (chr($ch2)??'null');
									}
									#coopy/Csv.hx:254: characters 37-53
									$last_processed = $last_processed + 1;
								}
							}
						}
						#coopy/Csv.hx:258: lines 258-260
						if ($this->discovered_eol === null) {
							#coopy/Csv.hx:259: characters 29-69
							$this->discovered_eol = chr($ch);
						}
						#coopy/Csv.hx:261: characters 25-41
						$this->row_ended = true;
						#coopy/Csv.hx:262: characters 25-30
						break;
					}
					#coopy/Csv.hx:264: lines 264-275
					if ($ch === 34) {
						#coopy/Csv.hx:265: lines 265-274
						if ($i === $this->cursor) {
							#coopy/Csv.hx:266: characters 29-43
							$quoting = true;
							#coopy/Csv.hx:267: characters 29-39
							$quote = $ch;
							#coopy/Csv.hx:268: lines 268-270
							if ($i !== $start) {
								#coopy/Csv.hx:269: characters 33-66
								$result = ($result??'null') . (chr($ch)??'null');
							}
							#coopy/Csv.hx:271: characters 29-37
							continue;
						} else if ($ch === $quote) {
							#coopy/Csv.hx:273: characters 29-43
							$quoting = true;
						}
					}
					#coopy/Csv.hx:276: characters 21-54
					$result = ($result??'null') . (chr($ch)??'null');
					#coopy/Csv.hx:277: characters 21-29
					continue;
				}
				#coopy/Csv.hx:279: lines 279-282
				if ($ch === $quote) {
					#coopy/Csv.hx:280: characters 21-36
					$quoting = false;
					#coopy/Csv.hx:281: characters 21-29
					continue;
				}
			}
			#coopy/Csv.hx:284: characters 13-46
			$result = ($result??'null') . (chr($ch)??'null');
		}

		#coopy/Csv.hx:286: characters 9-32
		$this->cursor = $last_processed;
		#coopy/Csv.hx:287: lines 287-297
		if ($quote === 0) {
			#coopy/Csv.hx:288: lines 288-290
			if ($result === "NULL") {
				#coopy/Csv.hx:289: characters 17-28
				return null;
			}
			#coopy/Csv.hx:291: lines 291-296
			if ($first_non_underscore > $start) {
				#coopy/Csv.hx:292: characters 17-60
				$del = $first_non_underscore - $start;
				#coopy/Csv.hx:293: lines 293-295
				if (HxString::substr($result, $del) === "NULL") {
					#coopy/Csv.hx:294: characters 21-44
					return HxString::substr($result, 1);
				}
			}
		}
		#coopy/Csv.hx:298: characters 9-22
		return $result;
	}


	/**
	 * @param string $txt
	 * @param Table $tab
	 * 
	 * @return bool
	 */
	public function parseTable ($txt, $tab) {
		#coopy/Csv.hx:153: characters 9-45
		if (!$tab->isResizable()) {
			#coopy/Csv.hx:153: characters 33-45
			return false;
		}
		#coopy/Csv.hx:154: characters 9-19
		$this->cursor = 0;
		#coopy/Csv.hx:155: characters 9-26
		$this->row_ended = false;
		#coopy/Csv.hx:156: characters 9-29
		$this->has_structure = true;
		#coopy/Csv.hx:157: characters 9-24
		$tab->resize(0, 0);
		#coopy/Csv.hx:158: characters 9-24
		$w = 0;
		#coopy/Csv.hx:159: characters 9-24
		$h = 0;
		#coopy/Csv.hx:160: characters 9-25
		$at = 0;
		#coopy/Csv.hx:161: characters 9-26
		$yat = 0;
		#coopy/Csv.hx:162: lines 162-190
		while ($this->cursor < strlen($txt)) {
			#coopy/Csv.hx:163: characters 13-52
			$cell = $this->parseCellPart($txt);
			#coopy/Csv.hx:164: lines 164-167
			if ($yat >= $h) {
				#coopy/Csv.hx:165: characters 17-26
				$h = $yat + 1;
				#coopy/Csv.hx:166: characters 17-32
				$tab->resize($w, $h);
			}
			#coopy/Csv.hx:168: lines 168-182
			if ($at >= $w) {
				#coopy/Csv.hx:169: lines 169-181
				if ($yat > 0) {
					#coopy/Csv.hx:170: lines 170-177
					if (($cell !== "") && ($cell !== null)) {
						#coopy/Csv.hx:171: characters 25-51
						$context = "";
						#coopy/Csv.hx:172: lines 172-175
						$_g1 = 0;
						#coopy/Csv.hx:172: lines 172-175
						$_g = $w;
						#coopy/Csv.hx:172: lines 172-175
						while ($_g1 < $_g) {
							#coopy/Csv.hx:172: lines 172-175
							$_g1 = $_g1 + 1;
							#coopy/Csv.hx:172: characters 30-31
							$i = $_g1 - 1;
							#coopy/Csv.hx:173: characters 29-52
							if ($i > 0) {
								#coopy/Csv.hx:173: characters 38-52
								$context = ($context??'null') . ",";
							}
							#coopy/Csv.hx:174: characters 29-58
							$context = ($context??'null') . (\Std::string($tab->getCell($i, $yat))??'null');
						}

						#coopy/Csv.hx:176: characters 25-30
						(Log::$trace)("Ignored overflowing row " . ($yat??'null') . " with cell '" . ($cell??'null') . "' after: " . ($context??'null'), new HxAnon([
							"fileName" => "coopy/Csv.hx",
							"lineNumber" => 176,
							"className" => "coopy.Csv",
							"methodName" => "parseTable",
						]));
					}
				} else {
					#coopy/Csv.hx:179: characters 21-29
					$w = $at + 1;
					#coopy/Csv.hx:180: characters 21-36
					$tab->resize($w, $h);
				}
			}
			#coopy/Csv.hx:183: characters 13-37
			$tab->setCell($at, $h - 1, $cell);
			#coopy/Csv.hx:184: characters 13-17
			$at = $at + 1;
			#coopy/Csv.hx:185: lines 185-188
			if ($this->row_ended) {
				#coopy/Csv.hx:186: characters 17-23
				$at = 0;
				#coopy/Csv.hx:187: characters 17-22
				$yat = $yat + 1;
			}
			#coopy/Csv.hx:189: characters 13-21
			$this->cursor++;
		}
		#coopy/Csv.hx:191: characters 9-20
		return true;
	}


	/**
	 * @param View $v
	 * @param mixed $d
	 * @param bool $force_quote
	 * 
	 * @return string
	 */
	public function renderCell ($v, $d, $force_quote = false) {
		#coopy/Csv.hx:77: lines 77-141
		if ($force_quote === null) {
			#coopy/Csv.hx:77: lines 77-141
			$force_quote = false;
		}
		#coopy/Csv.hx:78: lines 78-80
		if ($d === null) {
			#coopy/Csv.hx:79: characters 13-26
			return "NULL";
		}
		#coopy/Csv.hx:81: characters 9-41
		$str = $v->toString($d);
		#coopy/Csv.hx:82: characters 9-45
		$need_quote = $force_quote;
		#coopy/Csv.hx:83: lines 83-89
		if (!$need_quote) {
			#coopy/Csv.hx:84: lines 84-88
			if (strlen($str) > 0) {
				#coopy/Csv.hx:85: characters 21-70
				$tmp = null;
				#coopy/Csv.hx:85: characters 21-70
				if (((0 >= strlen($str) ? "" : $str[0])) !== " ") {
					#coopy/Csv.hx:85: characters 41-65
					$index = strlen($str) - 1;
					#coopy/Csv.hx:85: characters 21-70
					$tmp = ((($index < 0) || ($index >= strlen($str)) ? "" : $str[$index])) === " ";
				} else {
					#coopy/Csv.hx:85: characters 21-70
					$tmp = true;
				}
				#coopy/Csv.hx:85: lines 85-87
				if ($tmp) {
					#coopy/Csv.hx:86: characters 21-38
					$need_quote = true;
				}
			}
		}
		#coopy/Csv.hx:90: lines 90-119
		if (!$need_quote) {
			#coopy/Csv.hx:91: lines 91-118
			$_g1 = 0;
			#coopy/Csv.hx:91: lines 91-118
			$_g = strlen($str);
			#coopy/Csv.hx:91: lines 91-118
			while ($_g1 < $_g) {
				#coopy/Csv.hx:91: lines 91-118
				$_g1 = $_g1 + 1;
				#coopy/Csv.hx:91: characters 18-19
				$i = $_g1 - 1;
				#coopy/Csv.hx:92: characters 17-49
				$ch = (($i < 0) || ($i >= strlen($str)) ? "" : $str[$i]);
				#coopy/Csv.hx:93: lines 93-96
				if (($ch === "\"") || ($ch === "'") || ($ch === "\x0D") || ($ch === "\x0A") || ($ch === "\x09")) {
					#coopy/Csv.hx:94: characters 21-38
					$need_quote = true;
					#coopy/Csv.hx:95: characters 21-26
					break;
				}
				#coopy/Csv.hx:97: characters 25-40
				$_this = $this->delim;
				#coopy/Csv.hx:97: lines 97-117
				if ($ch === ((0 >= strlen($_this) ? "" : $_this[0]))) {
					#coopy/Csv.hx:98: lines 98-101
					if (strlen($this->delim) === 1) {
						#coopy/Csv.hx:99: characters 25-42
						$need_quote = true;
						#coopy/Csv.hx:100: characters 25-30
						break;
					}
					#coopy/Csv.hx:104: lines 104-116
					if (($i + strlen($this->delim)) <= strlen($str)) {
						#coopy/Csv.hx:105: characters 25-42
						$match = true;
						#coopy/Csv.hx:106: lines 106-111
						$_g3 = 1;
						#coopy/Csv.hx:106: lines 106-111
						$_g2 = strlen($this->delim);
						#coopy/Csv.hx:106: lines 106-111
						while ($_g3 < $_g2) {
							#coopy/Csv.hx:106: lines 106-111
							$_g3 = $_g3 + 1;
							#coopy/Csv.hx:106: characters 30-31
							$j = $_g3 - 1;
							#coopy/Csv.hx:107: characters 33-48
							$index1 = $i + $j;
							#coopy/Csv.hx:107: characters 50-65
							$_this1 = $this->delim;
							#coopy/Csv.hx:107: lines 107-110
							if (((($index1 < 0) || ($index1 >= strlen($str)) ? "" : $str[$index1])) !== ((($j < 0) || ($j >= strlen($_this1)) ? "" : $_this1[$j]))) {
								#coopy/Csv.hx:108: characters 33-46
								$match = false;
								#coopy/Csv.hx:109: characters 33-38
								break;
							}
						}

						#coopy/Csv.hx:112: lines 112-115
						if ($match) {
							#coopy/Csv.hx:113: characters 29-46
							$need_quote = true;
							#coopy/Csv.hx:114: characters 29-34
							break;
						}
					}
				}
			}
		}
		#coopy/Csv.hx:121: characters 9-34
		$result = "";
		#coopy/Csv.hx:122: characters 9-43
		if ($need_quote) {
			#coopy/Csv.hx:122: characters 27-40
			$result = ($result??'null') . "\"";
		}
		#coopy/Csv.hx:123: characters 9-36
		$line_buf = "";
		#coopy/Csv.hx:124: lines 124-138
		$_g11 = 0;
		#coopy/Csv.hx:124: lines 124-138
		$_g4 = strlen($str);
		#coopy/Csv.hx:124: lines 124-138
		while ($_g11 < $_g4) {
			#coopy/Csv.hx:124: lines 124-138
			$_g11 = $_g11 + 1;
			#coopy/Csv.hx:124: characters 14-15
			$i1 = $_g11 - 1;
			#coopy/Csv.hx:125: characters 13-45
			$ch1 = (($i1 < 0) || ($i1 >= strlen($str)) ? "" : $str[$i1]);
			#coopy/Csv.hx:126: lines 126-128
			if ($ch1 === "\"") {
				#coopy/Csv.hx:127: characters 17-30
				$result = ($result??'null') . "\"";
			}
			#coopy/Csv.hx:129: lines 129-137
			if (($ch1 !== "\x0D") && ($ch1 !== "\x0A")) {
				#coopy/Csv.hx:130: lines 130-133
				if (strlen($line_buf) > 0) {
					#coopy/Csv.hx:131: characters 21-39
					$result = ($result??'null') . ($line_buf??'null');
					#coopy/Csv.hx:132: characters 21-34
					$line_buf = "";
				}
				#coopy/Csv.hx:134: characters 17-29
				$result = ($result??'null') . ($ch1??'null');
			} else {
				#coopy/Csv.hx:136: characters 17-29
				$line_buf = ($line_buf??'null') . ($ch1??'null');
			}
		}

		#coopy/Csv.hx:139: characters 9-43
		if ($need_quote) {
			#coopy/Csv.hx:139: characters 27-40
			$result = ($result??'null') . "\"";
		}
		#coopy/Csv.hx:140: characters 9-22
		return $result;
	}


	/**
	 * @param Table $t
	 * 
	 * @return string
	 */
	public function renderTable ($t) {
		#coopy/Csv.hx:46: characters 9-33
		$eol = $this->preferred_eol;
		#coopy/Csv.hx:47: lines 47-49
		if ($eol === null) {
			#coopy/Csv.hx:48: characters 13-25
			$eol = "\x0D\x0A";
		}
		#coopy/Csv.hx:50: characters 9-33
		$result = "";
		#coopy/Csv.hx:51: characters 9-40
		$v = $t->getCellView();
		#coopy/Csv.hx:52: characters 9-41
		$stream = new TableStream($t);
		#coopy/Csv.hx:53: characters 9-32
		$w = $stream->width();
		#coopy/Csv.hx:54: characters 9-40
		$txts = new \Array_hx();
		#coopy/Csv.hx:55: lines 55-63
		while ($stream->fetch()) {
			#coopy/Csv.hx:56: lines 56-61
			$_g1 = 0;
			#coopy/Csv.hx:56: lines 56-61
			$_g = $w;
			#coopy/Csv.hx:56: lines 56-61
			while ($_g1 < $_g) {
				#coopy/Csv.hx:56: lines 56-61
				$_g1 = $_g1 + 1;
				#coopy/Csv.hx:56: characters 18-19
				$x = $_g1 - 1;
				#coopy/Csv.hx:57: lines 57-59
				if ($x > 0) {
					#coopy/Csv.hx:58: characters 21-37
					$txts->arr[$txts->length] = $this->delim;
					#coopy/Csv.hx:58: characters 21-37
					++$txts->length;
				}
				#coopy/Csv.hx:60: characters 17-59
				$x1 = $this->renderCell($v, $stream->getCell($x));
				#coopy/Csv.hx:60: characters 17-59
				$txts->arr[$txts->length] = $x1;
				#coopy/Csv.hx:60: characters 17-59
				++$txts->length;

			}

			#coopy/Csv.hx:62: characters 13-27
			$txts->arr[$txts->length] = $eol;
			#coopy/Csv.hx:62: characters 13-27
			++$txts->length;

		}
		#coopy/Csv.hx:64: characters 9-29
		return $txts->join("");
	}


	/**
	 * @param string $eol
	 * 
	 * @return void
	 */
	public function setPreferredEol ($eol) {
		#coopy/Csv.hx:338: characters 9-28
		$this->preferred_eol = $eol;
	}
}


Boot::registerClass(Csv::class, 'coopy.Csv');
