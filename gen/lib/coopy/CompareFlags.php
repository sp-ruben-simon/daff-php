<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3988422)
 */

namespace coopy;

use \haxe\ds\StringMap;
use \php\Boot;

class CompareFlags {
	/**
	 * @var StringMap
	 */
	public $acts;
	/**
	 * @var bool
	 */
	public $allow_nested_cells;
	/**
	 * @var bool
	 */
	public $always_show_header;
	/**
	 * @var bool
	 */
	public $always_show_order;
	/**
	 * @var \Array_hx
	 */
	public $columns_to_ignore;
	/**
	 * @var bool
	 */
	public $count_like_a_spreadsheet;
	/**
	 * @var string
	 */
	public $diff_strategy;
	/**
	 * @var \Array_hx
	 */
	public $ids;
	/**
	 * @var bool
	 */
	public $ignore_case;
	/**
	 * @var bool
	 */
	public $ignore_whitespace;
	/**
	 * @var bool
	 */
	public $never_show_order;
	/**
	 * @var bool
	 */
	public $ordered;
	/**
	 * @var string
	 */
	public $padding_strategy;
	/**
	 * @var Table
	 */
	public $parent;
	/**
	 * @var bool
	 */
	public $show_meta;
	/**
	 * @var bool
	 */
	public $show_unchanged;
	/**
	 * @var bool
	 */
	public $show_unchanged_columns;
	/**
	 * @var bool
	 */
	public $show_unchanged_meta;
	/**
	 * @var \Array_hx
	 */
	public $tables;
	/**
	 * @var string
	 */
	public $terminal_format;
	/**
	 * @var int
	 */
	public $unchanged_column_context;
	/**
	 * @var int
	 */
	public $unchanged_context;
	/**
	 * @var bool
	 */
	public $use_glyphs;
	/**
	 * @var \Array_hx
	 */
	public $warnings;


	/**
	 * @return void
	 */
	public function __construct () {
		#coopy/CompareFlags.hx:223: characters 9-23
		$this->ordered = true;
		#coopy/CompareFlags.hx:224: characters 9-31
		$this->show_unchanged = false;
		#coopy/CompareFlags.hx:225: characters 9-30
		$this->unchanged_context = 1;
		#coopy/CompareFlags.hx:226: characters 9-34
		$this->always_show_order = false;
		#coopy/CompareFlags.hx:227: characters 9-32
		$this->never_show_order = true;
		#coopy/CompareFlags.hx:228: characters 9-39
		$this->show_unchanged_columns = false;
		#coopy/CompareFlags.hx:229: characters 9-37
		$this->unchanged_column_context = 1;
		#coopy/CompareFlags.hx:230: characters 9-34
		$this->always_show_header = true;
		#coopy/CompareFlags.hx:231: characters 9-20
		$this->acts = null;
		#coopy/CompareFlags.hx:232: characters 9-19
		$this->ids = null;
		#coopy/CompareFlags.hx:233: characters 9-33
		$this->columns_to_ignore = null;
		#coopy/CompareFlags.hx:234: characters 9-35
		$this->allow_nested_cells = false;
		#coopy/CompareFlags.hx:235: characters 9-24
		$this->warnings = null;
		#coopy/CompareFlags.hx:236: characters 9-29
		$this->diff_strategy = null;
		#coopy/CompareFlags.hx:237: characters 9-25
		$this->show_meta = true;
		#coopy/CompareFlags.hx:238: characters 9-36
		$this->show_unchanged_meta = false;
		#coopy/CompareFlags.hx:239: characters 9-22
		$this->tables = null;
		#coopy/CompareFlags.hx:240: characters 9-22
		$this->parent = null;
		#coopy/CompareFlags.hx:241: characters 9-40
		$this->count_like_a_spreadsheet = true;
		#coopy/CompareFlags.hx:242: characters 9-34
		$this->ignore_whitespace = false;
		#coopy/CompareFlags.hx:243: characters 9-28
		$this->ignore_case = false;
		#coopy/CompareFlags.hx:244: characters 9-31
		$this->terminal_format = null;
		#coopy/CompareFlags.hx:245: characters 9-26
		$this->use_glyphs = true;
	}


	/**
	 * @param string $column
	 * 
	 * @return void
	 */
	public function addPrimaryKey ($column) {
		#coopy/CompareFlags.hx:323: characters 9-51
		if ($this->ids === null) {
			#coopy/CompareFlags.hx:323: characters 26-51
			$this->ids = new \Array_hx();
		}
		#coopy/CompareFlags.hx:324: characters 9-25
		$_this = $this->ids;
		#coopy/CompareFlags.hx:324: characters 9-25
		$_this->arr[$_this->length] = $column;
		#coopy/CompareFlags.hx:324: characters 9-25
		++$_this->length;

	}


	/**
	 * @param string $table
	 * 
	 * @return void
	 */
	public function addTable ($table) {
		#coopy/CompareFlags.hx:342: characters 9-55
		if ($this->tables === null) {
			#coopy/CompareFlags.hx:342: characters 27-55
			$this->tables = new \Array_hx();
		}
		#coopy/CompareFlags.hx:343: characters 9-27
		$_this = $this->tables;
		#coopy/CompareFlags.hx:343: characters 9-27
		$_this->arr[$_this->length] = $table;
		#coopy/CompareFlags.hx:343: characters 9-27
		++$_this->length;

	}


	/**
	 * @param string $warn
	 * 
	 * @return void
	 */
	public function addWarning ($warn) {
		#coopy/CompareFlags.hx:355: characters 9-59
		if ($this->warnings === null) {
			#coopy/CompareFlags.hx:355: characters 29-59
			$this->warnings = new \Array_hx();
		}
		#coopy/CompareFlags.hx:356: characters 9-28
		$_this = $this->warnings;
		#coopy/CompareFlags.hx:356: characters 9-28
		$_this->arr[$_this->length] = $warn;
		#coopy/CompareFlags.hx:356: characters 9-28
		++$_this->length;

	}


	/**
	 * @return bool
	 */
	public function allowDelete () {
		#coopy/CompareFlags.hx:295: characters 9-36
		if ($this->acts === null) {
			#coopy/CompareFlags.hx:295: characters 25-36
			return true;
		}
		#coopy/CompareFlags.hx:296: characters 16-37
		return array_key_exists("delete", $this->acts->data);
	}


	/**
	 * @return bool
	 */
	public function allowInsert () {
		#coopy/CompareFlags.hx:285: characters 9-36
		if ($this->acts === null) {
			#coopy/CompareFlags.hx:285: characters 25-36
			return true;
		}
		#coopy/CompareFlags.hx:286: characters 16-37
		return array_key_exists("insert", $this->acts->data);
	}


	/**
	 * @return bool
	 */
	public function allowUpdate () {
		#coopy/CompareFlags.hx:275: characters 9-36
		if ($this->acts === null) {
			#coopy/CompareFlags.hx:275: characters 25-36
			return true;
		}
		#coopy/CompareFlags.hx:276: characters 16-37
		return array_key_exists("update", $this->acts->data);
	}


	/**
	 * @param string $act
	 * @param bool $allow
	 * 
	 * @return bool
	 */
	public function filter ($act, $allow) {
		#coopy/CompareFlags.hx:258: lines 258-263
		if ($this->acts === null) {
			#coopy/CompareFlags.hx:259: characters 13-42
			$this->acts = new StringMap();
			#coopy/CompareFlags.hx:260: characters 13-38
			$this->acts->data["update"] = !$allow;
			#coopy/CompareFlags.hx:261: characters 13-38
			$this->acts->data["insert"] = !$allow;
			#coopy/CompareFlags.hx:262: characters 13-38
			$this->acts->data["delete"] = !$allow;
		}
		#coopy/CompareFlags.hx:264: characters 9-44
		if (!array_key_exists($act, $this->acts->data)) {
			#coopy/CompareFlags.hx:264: characters 32-44
			return false;
		}
		#coopy/CompareFlags.hx:265: characters 9-28
		$this->acts->data[$act] = $allow;
		#coopy/CompareFlags.hx:266: characters 9-20
		return true;
	}


	/**
	 * @return StringMap
	 */
	public function getIgnoredColumns () {
		#coopy/CompareFlags.hx:305: characters 9-49
		if ($this->columns_to_ignore === null) {
			#coopy/CompareFlags.hx:305: characters 38-49
			return null;
		}
		#coopy/CompareFlags.hx:306: characters 9-45
		$ignore = new StringMap();
		#coopy/CompareFlags.hx:307: lines 307-309
		$_g1 = 0;
		#coopy/CompareFlags.hx:307: lines 307-309
		$_g = $this->columns_to_ignore->length;
		#coopy/CompareFlags.hx:307: lines 307-309
		while ($_g1 < $_g) {
			#coopy/CompareFlags.hx:307: lines 307-309
			$_g1 = $_g1 + 1;
			#coopy/CompareFlags.hx:307: characters 14-15
			$i = $_g1 - 1;
			#coopy/CompareFlags.hx:308: characters 13-50
			$ignore->data[$this->columns_to_ignore[$i]] = true;
		}

		#coopy/CompareFlags.hx:310: characters 9-22
		return $ignore;
	}


	/**
	 * @return string
	 */
	public function getWarning () {
		#coopy/CompareFlags.hx:365: characters 9-35
		return $this->warnings->join("\x0A");
	}


	/**
	 * @param string $column
	 * 
	 * @return void
	 */
	public function ignoreColumn ($column) {
		#coopy/CompareFlags.hx:337: characters 9-77
		if ($this->columns_to_ignore === null) {
			#coopy/CompareFlags.hx:337: characters 38-77
			$this->columns_to_ignore = new \Array_hx();
		}
		#coopy/CompareFlags.hx:338: characters 9-39
		$_this = $this->columns_to_ignore;
		#coopy/CompareFlags.hx:338: characters 9-39
		$_this->arr[$_this->length] = $column;
		#coopy/CompareFlags.hx:338: characters 9-39
		++$_this->length;

	}
}


Boot::registerClass(CompareFlags::class, 'coopy.CompareFlags');
